/**
 * JavaCC file
 */

options {
  JDK_VERSION = "1.4";
  STATIC = false;
  UNICODE_INPUT = true;
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_PARSER = false;
}
PARSER_BEGIN(JavaCCTableParser)
package be.devijver.wikipedia.parser.javacc.table;

import java.util.*;
import be.devijver.wikipedia.parser.ast.*;

public class JavaCCTableParser {
}
PARSER_END(JavaCCTableParser)

public Table parseTable() :
{
	Table t;
}
{
	t = table() <EOF>
	{
		return t;
	}
}

private Table table() :
{
	AttributeList tableAttributeList = null;
	AttributeList captionAttributeList = null;
	Characters caption = null;
	List rows = new ArrayList();
}
{
	<TABLE_START> ( " " | "\t" )*
	[
		tableAttributeList = requiredAttributes()
	]
	[
		"\n|+"
		[
			LOOKAHEAD(( " " | "\t" )* attributes() "|")
			( " " | "\t" )* captionAttributeList = attributes() "|"
		]
		caption = text()
	]
	(
		LOOKAHEAD(("\n")* "\n|-" ("-")*)
		(("\n")* "\n|-" ("-")*)
		{
			AttributeList rowAttributeList = null;
		}
		[
			LOOKAHEAD(( " " | "\t" )* requiredAttributes())
			( " " | "\t" )* rowAttributeList = requiredAttributes()
		]
		{
			Row row = new Row(rowAttributeList);
			rows.add(row);
		}
		(
			LOOKAHEAD(cell(row))
			cell(row)
		)*
	)*
	[
		"\n"
	]
	<TABLE_END>
	{
		return new Table(
			(caption != null ? caption.toString() : null),
			tableAttributeList,
			captionAttributeList,
			rows
		);
	}
}

private void cell(Row row) :
{
	AttributeList cellAttributeList1 = null;
	AttributeList cellAttributeList2 = null;
	Content cellContent1 = null;
	Content cellContent2 = null;
	boolean strong = false;
	Table table = null;
}
{

	(
		("\n")+
		(
			"!" { strong = true; }
		|	"|" { strong = false; }
		)
	)
	[
		LOOKAHEAD(( " " | "\t" )* attributes() "|")
		( " " | "\t" )* cellAttributeList1 = attributes() "|"
	]
	{
		List contentList = new ArrayList();
	}
	(
		LOOKAHEAD(textWithoutStartingDash())
			cellContent1 = textWithoutStartingDash()
			{
				contentList.add(cellContent1);
			}
	|	LOOKAHEAD(table())
			table = table()
			{
				contentList.add(table);
			}
	)*
	{
		Content[] content = (Content[])contentList.toArray(new Content[contentList.size()]);
		row.addCell(new Cell(content, cellAttributeList1, strong));
	}
	(
		LOOKAHEAD("!!" | "||")
		(
			"!!" { strong = true; }
		|	"||" { strong = false; }
		)
		{
			cellAttributeList2 = null;
			cellContent2 = null;
		}
		[
			LOOKAHEAD(( " " | "\t" )* attributes() "|")
			( " " | "\t" )* cellAttributeList2 = attributes() "|"
		]
		[ cellContent2 = textWithoutStartingPipe() ]
		{
			Cell cell = new Cell(cellContent2, cellAttributeList2, strong);
			row.addCell(cell);
			//System.out.println("Added cell: " + cell);
		}
	)*
}

private String attributeName() : {
	StringBuffer sb = new StringBuffer();
	Token t;
}
{
	(
		LOOKAHEAD(2)
		(
			t = <CHARACTER>
		|	t = "{"
		|	t = "}"
		)
		{
			sb.append(t.image);
		}
	)+
	{
		return sb.toString();
	}
}

private Attribute attribute() :
{
	Token n = null;
	String name = null;
	StringBuffer value = new StringBuffer();
}
{
	name = attributeName()
	[ "="
		(
			"'"
			(
				(
					n=<CHARACTER>
				|	n=" "
				|	n="-"
				|	n=":"
				|	n="%"
				|	n="#"
				|	n=";"
				)
				{ value.append(n.image); }
			)*
			"'"
		|	"\""
			(
				(
					n=<CHARACTER>
				|	n=" "
				|	n="-"
				|	n=":"
				|	n="%"
				|	n="#"
				|	n=";"
				)
				{ value.append(n.image); }
			)*
			"\""
		)
	]
	{
		String attval;
		if (value.length() == 0) {
			attval = "#DEFAULT";
		} else {
			attval = value.toString();
		}
		return new Attribute(name.toString(), attval);
	}
}

private AttributeList attributes() :
{
	AttributeList attributes = new AttributeList();
	Attribute attribute;
}
{
	(
		attribute = attribute() ( " " | "\t" )*
		{
			attributes.addAttribute(attribute);
		}
	)* {
		return attributes;
	}
}

private AttributeList requiredAttributes() :
{
	AttributeList attributes = new AttributeList();
	Attribute attribute;
}
{
	(
		attribute = attribute() ( " " | "\t" )*
		{
			attributes.addAttribute(attribute);
		}
	)+ {
		return attributes;
	}
}


private Characters textWithoutStartingDash() :
{
	String s;
	Token t;
	StringBuffer sb = new StringBuffer();
}
{
	s = charactersWithoutDash() { sb.append(s); }
	(
		LOOKAHEAD(2)
		s = characters() { sb.append(s); }
	)*
 	{
		return new Characters(sb.toString());
	}
}

private Characters textWithoutStartingPipe() :
{
	String s;
	Token t;
	StringBuffer sb = new StringBuffer();
}
{
	s = charactersWithoutPipe() { sb.append(s); }
	(
		LOOKAHEAD(2)
		s = characters() { sb.append(s); }
	)*
 	{
		return new Characters(sb.toString());
	}
}

private Characters text() :
{
	String s;
	Token t;
	StringBuffer sb = new StringBuffer();
}
{
	(
		LOOKAHEAD(2)
		s = characters() { sb.append(s); }
	)+
 	{
		return new Characters(sb.toString());
	}
}


private String characters() :
{
	Token t;
}
{
		(
			t = "<br>\n"
		|	t = <CHARACTER>
		|	t = " "
		|	t = "\t"
		|	t = "'"
		|	t = ","
		|	t = "["
		|	t = "]"
		|	t = "("
		|	t = ")"
		|	t = "{"
		|	t = "}"
		|	t = "."
		|	t = "?"
		|	t = "!"
		|	t = "/"
		|	t = "\\"
		|	t = "+"
		|	t = "|"
		|	t = "="
		|	t = "<"
		|	t = ">"
		|	t = "*"
		|	t = "$"
		|	t = "-"
		|	t = "_"
		|	t = ":"
		|	t = ";"
		|	t = "%"
		|	t = "#"
		|	t = "&"
		|	t = "\""
		|	t = "`"
		|	t = "~"
		)
		{
			return t.image;
		}
}

private String charactersWithoutPipe() :
{
	Token t;
}
{
		(
			t = "<br>\n"
		|	t = <CHARACTER>
		|	t = " "
		|	t = "\t"
		|	t = "'"
		|	t = ","
		|	t = "["
		|	t = "]"
		|	t = "("
		|	t = ")"
		|	t = "{"
		|	t = "}"
		|	t = "."
		|	t = "?"
		|	t = "!"
		|	t = "/"
		|	t = "\\"
		|	t = "+"
		|	t = "="
		|	t = "<"
		|	t = ">"
		|	t = "*"
		|	t = "$"
		|	t = "-"
		|	t = "_"
		|	t = ":"
		|	t = ";"
		|	t = "%"
		|	t = "#"
		|	t = "&"
		|	t = "\""
		|	t = "`"
		|	t = "~"
		)
		{
			return t.image;
		}
}

private String charactersWithoutDash() :
{
	Token t;
}
{
		(
			t = "<br>\n"
		|	t = <CHARACTER>
		|	t = " "
		|	t = "\t"
		|	t = "'"
		|	t = ","
		|	t = "["
		|	t = "]"
		|	t = "("
		|	t = ")"
		|	t = "{"
		|	t = "}"
		|	t = "."
		|	t = "?"
		|	t = "!"
		|	t = "/"
		|	t = "\\"
		|	t = "+"
		|	t = "="
		|	t = "<"
		|	t = ">"
		|	t = "*"
		|	t = "$"
		|	t = "_"
		|	t = ":"
		|	t = ";"
		|	t = "%"
		|	t = "#"
		|	t = "&"
		|	t = "\""
		|	t = "`"
		|	t = "~"
		)
		{
			return t.image;
		}
}

TOKEN :
{
	< TABLE_START : "{|" >
|	< TABLE_END : "|}" >
}

SPECIAL_TOKEN :
{
	< START_COMMENT : "<!--" > : COMMENT
}

<COMMENT> SKIP :
{
	<		( ~["-"] )+			>
|	<		"-" ( ~["-"] )+			>
|	<		"-->"				>	: DEFAULT
|	<		"-"		>
}





TOKEN :
{
	< CHARACTER :
      [
       "\u0024",
       "\u0041"-"\u005a",
       "\u005f",
       "\u0061"-"\u007a",
       "\u00b0"-"\u00bf",
       "\u00c0"-"\u00d6",
       "\u00d7",
       "\u00d8"-"\u00f6",
       "\u00f8"-"\u00ff",
       "\u0100"-"\u1fff",
       "\u202b",
       "\u3040"-"\u318f",
       "\u3300"-"\u337f",
       "\u3400"-"\u3d2d",
       "\u4e00"-"\u9fff",
       "\uf900"-"\ufaff",
       "\u0030"-"\u0039",
       "\u0660"-"\u0669",
       "\u06f0"-"\u06f9",
       "\u0966"-"\u096f",
       "\u09e6"-"\u09ef",
       "\u0a66"-"\u0a6f",
       "\u0ae6"-"\u0aef",
       "\u0b66"-"\u0b6f",
       "\u0be7"-"\u0bef",
       "\u0c66"-"\u0c6f",
       "\u0ce6"-"\u0cef",
       "\u0d66"-"\u0d6f",
       "\u0e50"-"\u0e59",
       "\u0ed0"-"\u0ed9",
       "\u1040"-"\u1049",
       "\u2000"-"\uffff"
      ]
	 >
}
