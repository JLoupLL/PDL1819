Format;Languages;
string1 OP string2, where OP can be any of =, <>, <, >, <=</code> and <code>>=</code>;Pascal, Object Pascal (Delphi), OCaml, Seed7, Standard ML, BASIC, VB, VB .NET, F#;
string1 OP string2, where OP can be any of =, /=, ?, <, >, <=, ?</code> and <code>?</code>; Also: <code>EQ, NE, LT, LE, GE</code> and <code>GT</code>;ALGOL 68;
(stringOP? string1 string2), where OP can be any of =, -ci=, <, -ci<, >, -ci>, <=, -ci<=, >=</code> and <code>-ci>=</code> (operators starting with '<code>-ci</code>' are case-insensitive);Scheme;
(stringOP string1 string2), where OP can be any of =, -ci=, <>, -ci<>, <, -ci<, >, -ci>, <=, -ci<=, >=</code> and <code>-ci>=</code> (operators starting with '<code>-ci</code>' are case-insensitive);Scheme (SRFI 13);
(stringOP string1 string2), where OP can be any of =, -equal, /=, -not-equal, <, -lessp, >, -greaterp, <=, -not-greaterp, >=</code> and <code>-not-lessp</code> (the verbal operators are case-insensitive);Common Lisp;
(stringOP string1 string2), where OP can be any of =, /=, <, >, <=,</code> and <code>>=</code>;ISLISP;
string1 OP string2, where OP can be any of =, \=, <, >, <=</code> and <code>>=</code>;Rexx;
string1 OP string2, where OP can be any of =, ¬=, <, >, <=, >=, ¬<</code> and <code>¬></code>;PL/I;
string1 OP string2, where OP can be any of =, /=, <, >, <=</code> and <code>>=</code>;Ada;
string1 OP string2, where OP can be any of ==, /=, <, >, =<</code> and <code>>=</code>;Erlang;
string1 OP string2, where OP can be any of ==, /=, <, >, <=</code> and <code>>=</code>;Haskell;
string1 OP string2, where OP can be any of eq, ne, lt, gt, le and ge;Perl 5 / Perl 6;
string1 OP string2, where OP can be any of ==, !=, <, >, <=</code> and <code>>=</code>;C++ (STL), C#, D, Go, JavaScript, Python, PHP, Ruby, Swift, Ya;
string1 OP string2, where OP can be any of -eq, -ceq, -ne, -cne, -lt, -clt, -gt, -cgt, -le, -cle, -ge, and -cge (operators starting with 'c' are case-sensitive);Windows PowerShell;
string1 OP string2, where OP can be any of ==, ~=, <, >, <=</code> and <code>>=</code>;Lua;
string1 OP string2, where OP can be any of =, ~=, <, >, <=</code> and <code>>=</code>;Smalltalk;
string1 OP string2, where OP can be any of ==, /=, <, >, <=</code> and <code>>=; Also: .EQ., .NE., .LT., .LE., .GT.</code> and <code>.GE.</code>;Fortran.[7];
string1 OP string2 where OP can be any of =, <>, <, >, <=, >=</code> as well as worded equivalents;COBOL;
string1 OP string2 where OP can be any of ==, <>, <, >, <=</code> and <code>>=</code>;Cobra;
string1 OP string2 is available in the syntax, but means comparison of the pointers pointing to the strings, not of the string contents. Use the Compare (integer result) function.;C, Java;
