;fixed size array;dynamic size array;
one-dimensional array;multi-dimensional array;one-dimensional array;multi-dimensional array;
Ada[1];array (<first>''' .. '''<last>''') of '''<type></code><br>or<br>'''array ('''<discrete_type>''') of '''<type></code>;array (<first1> .. <last1>, <first2> .. <last2>, ...) of <type><br>or<br>'''array ('''<discrete_type<sub>1</sub>>''', '''<discrete_type<sub>2</sub>>''', '''...''') of '''<type></code>;array (<discrete_type>''' range <>) of '''<type></code>;array (<discrete_type1> range <>, <discrete_type2> range <>, ...) of <type></code>;
ALGOL 68;[first:last]<wbr/>«modename» or simply: [size]<wbr/>«modename»;[first1:last1, first2:last2]<wbr/>«modename» or [first1:last1][first2:last2]<wbr/>«modename» etc.;flex[first:last]<wbr/>«modename» or simply: flex[size]<wbr/>«modename»;flex[first1:last1, first2:last2]<wbr/>«modename» or flex[first1:last1]<wbr/>flex[first2:last2]<wbr/>«modename» etc.;
C (C99);type name[size]{{ref|C's array|[a]}};type name[size1][size2]{{ref|C's array|[a]}};type *name or within a block: int n = ...; type name[n];;
C++ (STL);«std::»array[[std::array|«std::»array]]<'''type, size'''>'''</code>(C++11);;«std::»vector[[std::vector|«std::»vector]]<'''type'''>'''</code>;
C#;type[];type[{{Not a typo|,,}}...];System<wbr/>.Collections<wbr/>.ArrayList or System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/><'''type'''>'''</code>;;
Java;type[]{{ref|Java's array|[b]}};type[][]...{{ref|Java's array|[b]}};ArrayList or ArrayList<'''type'''>'''</code>;;
D;type[size];type[size1][size2];type[];;
Go;[size]type;[size1][size2]...type;[]type;[][]type;;
Swift;;;[type] or Array<'''type'''>'''</code>;[[type]] or Array<Array<'''type'''>>'''</code>;;
Objective-C;NSArray;;NSMutableArray;;
JavaScript;{{n/a}};{{n/a}};Array{{ref|JavaScript's array|[d]}};
Common Lisp;;;;;
Scheme;;;;;
ISLISP;;;;;
Pascal;array[first..last] of type{{ref|subrange|[c]}};array[first1..last1] of array[first2..last2] ... of type {{ref|subrange|[c]}} or array[first1..last1, first2..last2, ...] of type {{ref|subrange|[c]}};{{n/a}};{{n/a}};
Object Pascal (Delphi);array of type;array of array ... of type;
Visual Basic;;;;;
Visual Basic .NET;;;System<wbr/>.Collections<wbr/>.ArrayList or System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/>(Of type);;
Python;;;list;;
S-Lang;;;;;
Fortran;type :: name(size);type :: name(size1, size2,...);type, ALLOCATABLE :: name(:);type, ALLOCATABLE :: name(:,:,...);
PHP;;;array;;
Perl;;;;;
Perl 6;;;Array[type] or Array of type;;
Ruby;;;Array;;
Scala;Array[type];Array[...[Array[type]]...];ArrayBuffer[type];;
Seed7;array type or array [idxType] type;array array type or array [idxType] array [idxType] type;array type or array [idxType] type;array array type or array [idxType] array [idxType] type;
Smalltalk;Array;;OrderedCollection;;
Windows PowerShell;type[];type[{{Not a typo|,,}}...];;;
OCaml;type array;type array ... array;;;
F#;type [] or type array;type [{{Not a typo|,,}}...];System<wbr/>.Collections<wbr/>.ArrayList or System<wbr/>.Collections<wbr/>.Generic<wbr/>.List<wbr/><'''type'''>'''</code>;;
Standard ML;type vector or type array;;;;
Haskell (GHC);;;;;
COBOL;level-number type OCCURS size «TIMES».;one-dimensional array definition...;level-number type OCCURS min-size TO max-size «TIMES» DEPENDING «ON» size.{{ref|COBOL DEPENDING ON clause|[e]}};{{n/a}};
